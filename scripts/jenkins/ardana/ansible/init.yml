---
- name: Initialize the Deployer
  hosts: hosts
  gather_facts: False

  vars_files:
    - ardana_net_vars.yml
    - vars/main.yml

  vars:
    deployer_model: deployerincloud-lite

  tasks:
  - name: Write deployer info to /etc/motd
    become: yes
    shell: |
      echo "DEPLOYER_IP={{ deployer_floating_ip | default(None) }}" >> /etc/motd

  - name: Grow 1st partition filesystem
    become: yes
    shell: |
      /usr/sbin/growpart /dev/vda 1 && /sbin/resize2fs /dev/vda1
    ignore_errors: True

  - include: pre-deploy-checks.yml

  - name: Call ardana-init
    shell: /usr/bin/ardana-init
    environment:
      ARDANA_INIT_AUTO: 1
    become: true
    become_user: ardana

  - name: Create ssh key for ardana user on deployer
    shell: |
      [ -f ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""
      [ -f ~/.ssh/authorized_keys ] || touch ~/.ssh/authorized_keys
    become: true
    become_user: ardana

  - name: Copy authorized keys from root to ardana user on deployer
    shell: |
      cat ~root/.ssh/authorized_keys ~ardana/.ssh/authorized_keys | sort -u -o ~ardana/.ssh/authorized_keys
    become: true

  - name: Create ssh key for root user on deployer
    shell: |
      [ -f ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""

  - name: Copy root key to non-deployer nodes
    shell: |
      sshpass -p linux ssh-copy-id -o ConnectionAttempts=120 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no {{ item }}
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips }}"
    ignore_errors: True
    when: item != "" and item != deployer_mgmt_ip

  - name: Create ardana user/group on non-deployer nodes
    shell: |
      ssh -o ConnectionAttempts=120 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@{{ item }} "getent group ardana || groupadd -r ardana"
      ssh -o ConnectionAttempts=120 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@{{ item }} "getent passwd ardana || useradd -m -g ardana -d /var/lib/ardana -c 'Ardana Home' -r -s /bin/bash ardana"
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  root@{{ item }} mkdir -p /var/lib/ardana/.ssh/
      scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  ~ardana/.ssh/id_rsa.pub root@{{ item }}:/var/lib/ardana/.ssh/authorized_keys
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  root@{{ item }} chown -R ardana: /var/lib/ardana/.ssh/
      scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  /etc/sudoers.d/ardana root@{{ item }}:/etc/sudoers.d/ardana
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips }}"
    when: item != "" and item != deployer_mgmt_ip

  # osconfig-ansible should take care of installing the repositories itself,
  # it's just that it won't auto accept the Devel key, so do that now
  - name: Import Devel:Cloud:8 key
    shell: |
      kf=/srv/www/suse-12.3/x86_64/repos/Cloud/repodata/repomd.xml.key
      [ -r $kf ] || kf=/srv/www/suse-12.3/x86_64/repos/Cloud/content.key
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@{{ item }} "cat >/tmp/cloud.key && rpm --import /tmp/cloud.key && rm /tmp/cloud.key" < $kf
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips }}"
    when: item != "" and item != deployer_mgmt_ip

  - name: Grow 1st partition filesystem on non-deployer nodes
    become: yes
    shell: |
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  root@{{ item }} "/usr/sbin/growpart /dev/vda 1 && /sbin/resize2fs /dev/vda1"
    ignore_errors: True
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips }}"
    when: item != "" and item != deployer_mgmt_ip

  - name: Initialize target Model from "{{ deployer_model }}"
    synchronize:
      src: "/var/lib/ardana/openstack/ardana-ci/{{ deployer_model}}/"
      dest: /var/lib/ardana/openstack/my_cloud/definition/
    delegate_to: "{{ inventory_hostname }}"
    become: true
    become_user: ardana
    tags:
      - create-ardana-input-model

  - name: Update servers in Model
    template:
      src: "{{ deployer_model }}/input-model-servers.yml"
      dest: /var/lib/ardana//openstack/my_cloud/definition/data/servers.yml
      owner: ardana
      group: ardana
    tags:
      - create-ardana-input-model

  - name: Update DNS servers in Model
    shell: >
      python -c "
         import yaml;
         f = open('cloudConfig.yml');
         data = yaml.load(f.read());
         f.close();
         data['cloud']['dns-settings']['nameservers'] = {{ mgmt_dnsservers }} ;
         data['cloud']['ntp-servers'] = ['ntp.suse.de'];
         f = open('cloudConfig.yml', 'w');
         f.write(yaml.safe_dump(data, default_flow_style=False));
         f.close();"
    args:
      chdir: /var/lib/ardana//openstack/my_cloud/definition/
    tags:
      - create-ardana-input-model

  - name: Apply HEAT ci specific changes to Model
    synchronize:
      src: "files/{{ deployer_model }}/input-model/"
      dest: /var/lib/ardana//openstack/my_cloud/definition/data/
      copy_links: yes
      archive: no
      recursive: yes
    become: true
    become_user: ardana

  - name: Replace disks to accomodate virtio_blk
    replace:
      dest: "/var/lib/ardana//openstack/my_cloud/definition/data/{{ item }}"
      regexp: '/dev/sd([a-f]) *$'
      replace: '/dev/vd\1'
    with_items:
      - disks_ardana.yml
      - disks_compute.yml
      - disks_dbmq.yml
      - disks_mml.yml
      - disks_osc.yml
    ignore_errors: True
    tags:
      - create-ardana-input-model

  - name: set patches variable
    shell: |
        curl -k https://w3.nue.suse.com/~sjamgade/patches.txt
    register: patches

  - name: Install the patch command
    zypper:
        name: patch
        state: present
    # https://gist.github.com/marcusphi/6791404
    when: patches is defined and (not patches.stdout|trim == '')
  
  - name: Curl the patches and apply them
    become: true
    become_user: ardana
    shell: |
        curl -k '{{ item }}' | base64 --decode | patch -p1
    args:
      chdir: /var/lib/ardana/openstack/ardana/ansible
    with_items: "{{ patches.stdout.split(',')}}"
    when: patches is defined and (not patches.stdout|trim == '')

  - name: Add my_cloud config to git
    shell: |
      git add -A
      git commit -q -m "Add custom config to git" || true
    args:
      chdir: /var/lib/ardana//openstack/ardana/ansible
    become: true
    become_user: ardana

  - name: Run config-processor-run.yml playbook
    shell: |
      ansible-playbook -vvv -i hosts/localhost -e encrypt="" -e rekey="" config-processor-run.yml
  #    no_log: True
    register: out
    args:
      chdir: /var/lib/ardana/openstack/ardana/ansible
    become: true
    become_user: ardana

  - name: Run ready-deployment.yml playbook
    shell: |
      ansible-playbook -vvv -i hosts/localhost ready-deployment.yml
    args:
      chdir: /var/lib/ardana/openstack/ardana/ansible
    become: true
    become_user: ardana

  - name: Enable skip_disk_config on controller
    shell: |
      mkdir -p /etc/openstack/
      touch /etc/openstack/skip_disk_config

  - name: Enable skip_disk_config on computes
    # Using ardana + sudo here to avoid issues with remote root access after running site.yml
    # for the first time
    shell: |
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  {{ item }} sudo mkdir /etc/openstack/
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  {{ item }} sudo touch /etc/openstack/skip_disk_config
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips }}"
    become: true
    when: item != "" and item != deployer_mgmt_ip
    become_user: ardana
